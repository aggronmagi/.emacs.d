#+STARTUP: content

* 基础配置
** 包管理
#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defconst sys/win32p
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")


(defconst sys/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst sys/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst sys/mac-x-p
  (and (display-graphic-p) sys/macp)
  "Are we running under X on a Mac system?")

(defconst sys/mac-ns-p
  (eq window-system 'ns)
  "Are we running on a GNUstep or Macintosh Cocoa display?")

(defconst sys/mac-cocoa-p
  (featurep 'cocoa)
  "Are we running with Cocoa on a Mac system?")
;; 包管理
(require 'package)
(setq package-enable-at-startup nil)
;; 添加melpa源(更多package)
(add-to-list 'package-archives
			 '("melpa" . "https://melpa.org/packages/"))

(setq package-archives
      '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
        ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

(package-initialize)

;; 安装use package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; 新增本地lisp文件目录
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src
** 命令记录
#+begin_src emacs-lisp
(use-package keyfreq
  :ensure t
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
** mac 修复调整
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mac 修复环境变量
;; (use-package exec-path-from-shell
;;   :if (memq window-system '(mac ns))
;;   :ensure t
;;   :config
;;   (exec-path-from-shell-initialize)
;;   (exec-path-from-shell-copy-env "GOPATH"))
(use-package exec-path-from-shell
  :if (not sys/win32p)
  :ensure t
  :init
  (exec-path-from-shell-initialize)
  (add-to-list 'exec-path (concat invocation-directory "bin") t)
  (exec-path-from-shell-copy-env "GOPATH")
  (setenv "LIBRARY_PATH" "/usr/local/lib/gcc/11/")
  (setq comp-deferred-compilation t)
  ;; (if (and (fboundp 'native-comp-available-p)
  ;;          (native-comp-available-p))
  ;;     (progn
  ;;       (message "Native comp is available")
  ;;       ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
  ;;       ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
  ;;       (add-to-list 'exec-path (concat invocation-directory "bin") t)
  ;;       (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
  ;;                                      (when (getenv "LIBRARY_PATH")
  ;;                                        ":")
  ;;                                      ;; This is where Homebrew puts gcc libraries.
  ;;                                      (car (file-expand-wildcards
  ;;                                            (expand-file-name "~/homebrew/opt/gcc/lib/gcc/*")))))
  ;;       ;; Only set after LIBRARY_PATH can find gcc libraries.
  ;;       (setq comp-deferred-compilation t))
  ;;   (message "Native comp is *not* available"))
  )

;; 复制,粘贴使用下面配置,将导致multiple-cursor的复制,粘贴失效
;; copy paste
;; (cond ((string-equal system-type "darwin")
;;        (progn
;;          ;; modify option and command key
;;          ;;(setq mac-comman-modifier 'control)
;;          ;;(setq mac-option-modifier 'meta)
;;
;;          ;; batter copy and paste support for mac os x
;;          (defun copy-from-osx ()
;;            (shell-command-to-string "pbpaste"))
;;          (defun paste-to-osx (text &optional push)
;;            (let ((process-connection-type nil))
;;              (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
;;                (process-send-string proc text)
;;                (process-send-eof proc))))
;;          (setq interprogram-cut-function 'paste-to-osx)
;;          (setq interprogram-paste-function 'copy-from-osx))))
#+end_src
** 编码和语言环境
#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 编码和语言环境
(prefer-coding-system 'utf-8)

(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US.UTF-8")
#+end_src
** 状态栏配置
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 状态栏相关
;; 在状态栏显示时间
(use-package time
  :ensure nil
  :custom ((display-time-format "[%e号 %H:%M 周%u]")
		   (display-time-use-mail-icon t))
  :config
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html
  (display-time-mode 1)
  )
;; 状态栏显示 列序号
(column-number-mode 1)
;; 显示当前文件进度 百分比
(display-battery-mode 1)
#+end_src
** 基础设置
#+begin_src emacs-lisp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 基础设置
;; 使用y/n 代替yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; tab
;; (setq indent-tabs-mode t)

	;;;; 隐藏菜单栏
;;(menu-bar-mode -1)

;; 高亮当前行
;; (global-hl-line-mode t)

;; 隐藏工具栏
(tool-bar-mode -1)

;; 隐藏滚动条
(toggle-scroll-bar -1)

;; 全局文件恢复 从 #..#文件恢复
(global-auto-revert-mode t)

;; ;; 启动后开启全屏
;; (toggle-frame-fullscreen)

;; 隐藏开始界面
(setq inhibit-splash-screen t)

;; scratch buffer 消息清空
(setq initial-scratch-message nil)

;; 单个空格结束句子
(setq sentence-end-double-space nil)

;; 关闭备份文件
(setq make-backup-files nil)

;; 关闭自动保存
(setq auto-save-default nil)

;; 去除文件锁
(setq create-lockfiles nil)

;; 一个tab=4个空格.默认8个
(setq-default tab-width 4)

;; 保存历史记录模式
(savehist-mode 1)
(setq savehist-file "~/.emacs.d/.savehist")
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
	  '(kill-ring
		search-ring
		regexp-search-ring))

;; ;; Shows a list of buffers
;; (global-set-key (kbd "C-x C-b") 'ibuffer)


;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; don't pop up font menu
(global-set-key (kbd "s-t") '(lambda () (interactive)))
#+end_src
** 性能相关
#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 性能相关
(if (not (display-graphic-p))
    (progn
      ;; 增大垃圾回收的阈值，提高整体性能（内存换效率）
      (setq gc-cons-threshold (* 8192 8192))
      ;; 增大同LSP服务器交互时的读取文件的大小
      (setq read-process-output-max (* 1024 1024 128)) ;; 128MB
      ))
#+end_src
** 函数
#+begin_src emacs-lisp
(defun icons-displayable-p ()
  "Return non-nil if `all-the-icons' is displayable."
  (and (display-graphic-p)
	   (require 'all-the-icons nil t)))
#+end_src
** restart
#+begin_src emacs-lisp
(use-package restart-emacs
  :ensure t
  :config
  (setq restart-emacs-restore-frames t)
  :bind
  (:map global-map
   ("M-<f10>" . restart-emacs)))
#+end_src
* 显示
** 滚动条
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
#+end_src
** hydra
#+begin_src emacs-lisp

(use-package pretty-hydra
  :ensure t
  :bind ("<f6>" . toggles-hydra/body)
  :init
  (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                      &key face height v-adjust)
    "Add an icon in the hydra title."
    (let ((face (or face `(:foreground ,(face-background 'highlight))))
          (height (or height 1.0))
          (v-adjust (or v-adjust 0.0)))
      (concat
       (when (and (icons-displayable-p) icon-type icon-name)
         (let ((f (intern (format "all-the-icons-%s" icon-type))))
           (when (fboundp f)
             (concat
              (apply f (list icon-name :face face :height height :v-adjust v-adjust))
              " "))))
       (propertize title 'face face))))

  ;; Global toggles
  (with-no-warnings
    (pretty-hydra-define toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "toggle-on" :v-adjust -0.1)
                                        :color amaranth :quit-key "q")
      ("Basic"
       (("n" (if (fboundp 'display-line-numbers-mode)
                 (display-line-numbers-mode (if display-line-numbers-mode -1 1))
               (global-linum-mode (if global-linum-mode -1 1)))
         "line number"
         :toggle (or (bound-and-true-p display-line-numbers-mode) global-linum-mode))
        ;; ("a" global-aggressive-indent-mode "aggressive indent" :toggle t)
        ;; ("d" global-hungry-delete-mode "hungry delete" :toggle t)
        ("e" electric-pair-mode "electric pair" :toggle t)
        ("c" flyspell-mode "spell check" :toggle t)
        ("s" prettify-symbols-mode "pretty symbol" :toggle t)
        ;; ("l" global-page-break-lines-mode "page break lines" :toggle t)
        ("b" display-battery-mode "battery" :toggle t)
        ("i" display-time-mode "time" :toggle t)
        ("m" doom-modeline-mode "modern mode-line" :toggle t))
       "Highlight"
       (("h l" global-hl-line-mode "line" :toggle t)
        ("h p" show-paren-mode "paren" :toggle t)
        ;; ("h s" symbol-overlay-mode "symbol" :toggle t)
        ;; ("h r" rainbow-mode "rainbow" :toggle t)
        ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
         "whitespace" :toggle show-trailing-whitespace)
        ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
        ("h i" highlight-indent-guides-mode "indent" :toggle t)
        ("h t" global-hl-todo-mode "todo" :toggle t))
       "Program"
       (("f" flycheck-mode "flycheck" :toggle t)
        ("F" flymake-mode "flymake" :toggle t)
        ;; ("o" origami-mode "folding" :toggle t)
        ("O" hs-minor-mode "hideshow" :toggle t)
        ("u" subword-mode "subword" :toggle t)
        ("W" which-function-mode "which function" :toggle t)
        ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
        ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
        ;; ("v" global-diff-hl-mode "gutter" :toggle t)
        ;; ("V" diff-hl-flydiff-mode "live gutter" :toggle t)
        ;; ("M" diff-hl-margin-mode "margin gutter" :toggle t)
        ;; ("D" diff-hl-dired-mode "dired gutter" :toggle t)
		)
       ;; "Theme"
       ;; (("t a" (centaur-load-theme 'auto) "auto"
       ;;   :toggle (eq centaur-theme 'auto) :exit t)
       ;;  ("t m" (centaur-load-theme 'random) "random"
       ;;   :toggle (eq centaur-theme 'random) :exit t)
       ;;  ("t s" (centaur-load-theme 'system) "system"
       ;;   :toggle (eq centaur-theme 'system) :exit t)
       ;;  ("t d" (centaur-load-theme 'default) "default"
       ;;   :toggle (centaur-theme-enable-p 'default) :exit t)
       ;;  ("t p" (centaur-load-theme 'pro) "pro"
       ;;   :toggle (centaur-theme-enable-p 'pro) :exit t)
       ;;  ("t k" (centaur-load-theme 'dark) "dark"
       ;;   :toggle (centaur-theme-enable-p 'dark) :exit t)
       ;;  ("t l" (centaur-load-theme 'light) "light"
       ;;   :toggle (centaur-theme-enable-p 'light) :exit t)
       ;;  ("t w" (centaur-load-theme 'warm) "warm"
       ;;   :toggle (centaur-theme-enable-p 'warm) :exit t)
       ;;  ("t c" (centaur-load-theme 'cold) "cold"
       ;;   :toggle (centaur-theme-enable-p 'cold) :exit t)
       ;;  ("t y" (centaur-load-theme 'day) "day"
       ;;   :toggle (centaur-theme-enable-p 'day) :exit t)
       ;;  ("t n" (centaur-load-theme 'night) "night"
       ;;   :toggle (centaur-theme-enable-p 'night) :exit t)
       ;;  ("t o" (ivy-read "Load custom theme: "
       ;;                   (all-completions "doom" (custom-available-themes))
       ;;                   :action (lambda (theme)
       ;;                             (centaur-set-variable
       ;;                              'centaur-theme
       ;;                              (let ((x (intern theme)))
       ;;                                (or (car (rassoc x centaur-theme-alist)) x)))
       ;;                             (counsel-load-theme-action theme))
       ;;                   :caller 'counsel-load-theme)
       ;;   "others"
       ;;   :toggle (not (or (rassoc (car custom-enabled-themes) centaur-theme-alist)
       ;;                    (rassoc (cadr custom-enabled-themes) centaur-theme-alist)))
       ;;   :exit t))
       ;; "Package Archive"
       ;; (("p m" (centaur-set-package-archives 'melpa t)
       ;;   "melpa" :toggle (eq centaur-package-archives 'melpa) :exit t)
       ;;  ("p b" (centaur-set-package-archives 'bfsu t)
       ;;   "bfsu" :toggle (eq centaur-package-archives 'bfsu) :exit t)
       ;;  ("p c" (centaur-set-package-archives 'emacs-china t)
       ;;   "emacs china" :toggle (eq centaur-package-archives 'emacs-china) :exit t)
       ;;  ("p n" (centaur-set-package-archives 'netease t)
       ;;   "netease" :toggle (eq centaur-package-archives 'netease) :exit t)
       ;;  ("p s" (centaur-set-package-archives 'ustc t)
       ;;   "ustc" :toggle (eq centaur-package-archives 'ustc) :exit t)
       ;;  ("p t" (centaur-set-package-archives 'tencent t)
       ;;   "tencent" :toggle (eq centaur-package-archives 'tencent) :exit t)
       ;;  ("p u" (centaur-set-package-archives 'tuna t)
       ;;   "tuna" :toggle (eq centaur-package-archives 'tuna) :exit t)
       ;;  ("p T" (centaur-test-package-archives) "speed test" :exit t)))
	   ))))

#+end_src
** 自动匹配括号
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 括号匹配相关
(setq show-paren-mode nil)
;; ;; 括号自动补全
;; (use-package autopair
;;   :ensure t
;;   :init
;;   (defun @-enable-autopair ()
;; 	(autopair-mode t))
;;   :hook
;;   (progn
;; 	(prog-mode . @-enable-autopair)
;; 	(emacs-lisp-mode . @-enable-autopair)
;; 	))

;; 高亮括号匹配
(use-package highlight-parentheses
  :ensure t)
;; 全局启用括号高亮
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
	(highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
;; NOTE 括号跳转  C-M-n,C-M-p
;; ;; 彩虹色 用于web css等
;; (use-package rainbow-mode
;;   :ensure t
;;   :init
;;   (defun @-enable-rainbow ()
;;     (rainbow-mode t))
;;   :hook ((prog-mode . @-enable-reainbow)))
;; 彩色高亮匹配括号 - 编程模式自动启动
(use-package rainbow-delimiters
  :ensure t
  :init
  (defun @-enable-rainbow-delimiters ()
	(rainbow-delimiters-mode t))
  :hook
  (progn
	(prog-mode . @-enable-rainbow-delimiters)
	(emacs-lisp-mode . @-enable-rainbow-delimiters))
  )
;;(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+end_src

** 皮肤,Theme
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 皮肤,Theme
;; 安全的加载theme
(setq custom-safe-themes t)
;; 白天 座位这屏幕反光. 不能用这个皮肤
;; ;; 使用 doom theme
;; (use-package doom-themes
;;   :ensure t
;;   :config
;;   ;; Global settings (defaults)
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;     doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   (load-theme 'doom-one t)
;;   ;; Enable flashing mode-line on errors
;;   (doom-themes-visual-bell-config)
;;   ;; for treemacs users
;;   ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
;;   ;; (doom-themes-treemacs-config)
;;   ;; Corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))

(use-package monokai-theme
  :ensure t
  :config
  (load-theme 'monokai t))

;; (use-package vscode-dark-plus-theme
;;   :ensure t
;;   :config
;;   (load-theme 'vscode-dark-plus t))

;; (use-package faff-theme
;;   :ensure t
;;   :config
;;   (load-theme 'faff t))
;; (use-package solarized-theme
;;   :ensure t
;;   :config
;;   (load-theme 'solarized-dark t))

#+end_src

** 状态栏
#+begin_src emacs-lisp
;; 状态栏
(use-package doom-modeline
  :ensure t
  :init
  (set-face-background 'mode-line nil)
  :hook (after-init . doom-modeline-mode))
#+end_src
** 行号
#+begin_src emacs-lisp

;; 行号显示
;;(global-linum-mode)
;; (global-display-line-numbers-mode 1)
(use-package display-line-numbers
  :ensure nil
  :hook ((prog-mode text-mode conf-mode) . display-line-numbers-mode))
;; (use-package linum
;;   :ensure t
;;   :config
;;   (global-linum-mode t)
;;   (setq linum-format "%4d  ")
;;   (set-face-background 'linum nil))
#+end_src

** icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** 字体,中文支持
#+begin_src emacs-lisp
;;
(use-package frame
  :ensure nil
  :config
  ;; No cursor blinking, it's distracting
  (blink-cursor-mode 0)

  (when (display-graphic-p)
	;;(add-to-list 'default-frame-alist '(font . "Hack-15"))
	(add-to-list 'default-frame-alist '(fullscreen . maximized)))

  (setq-default cursor-type 't))
;; 中文支持
;;(if (not sys/win32p)
(use-package cnfonts
  :ensure t
  :config
  ;; 让 cnfonts 随着 Emacs 自动生效。
  (cnfonts-enable)
  ;; ;; 不同的标题，使用的字体大小也不同
  ;; (setq cnfonts-use-face-font-rescale t)
  
  )
;;)

#+end_src

** 编辑
#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+end_src

** 复制文件名
#+begin_src emacs-list
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+end_src
** 分词
#+begin_src emacs-lisp
(use-package subword
  :hook (after-init . global-subword-mode))
#+end_src
** posframe
#+begin_src emacs-lisp
(use-package posframe
  :if (not sys/win32p)
  :hook (after-load-theme . posframe-delete-all)
  :init
  (with-eval-after-load 'persp-mode
    (add-hook 'persp-load-buffer-functions
              (lambda (&rest _)
                (posframe-delete-all))))
  :config
  ;; (with-no-warnings                     
  ;;   (defun my-posframe--prettify-frame (&rest _)
  ;;     (set-face-background 'fringe nil posframe--frame))
  ;;   (advice-add #'posframe--create-posframe :after #'my-posframe--prettify-frame)

  ;;   (defun posframe-poshandler-frame-center-near-bottom (info)
  ;;     (cons (/ (- (plist-get info :parent-frame-width)
  ;;                 (plist-get info :posframe-width))
  ;;              2)
  ;;           (/ (plist-get info :parent-frame-height)
  ;;              2))))
  )
#+end_src
* 工具
** auto-save
#+begin_src emacs-lisp
(require 'auto-save)
;; quietly sav
(setq auto-save-silent t)
;; ;; automatically delete spaces at the end of the line when saving
;; (setq auto-save-delete-trailing-whitespace t)
;; The idle seconds to auto save file.
(setq auto-save-idle 3)
;; 开启自动保存
(auto-save-enable)

#+end_src
** back-button
#+begin_src emacs-lisp
;; back-button 跳转
(if sys/win32p
	(progn
	  (setq back-button-local-keystrokes '("C-c x ."))
	  (setq back-button-local-backward-keystrokes '("C-c x ["))
	  (setq back-button-local-forward-keystrokes '("C-c x ]"))
	  (setq back-button-global-keystrokes '("C-c x >"))
	  (setq back-button-global-backward-keystrokes '("C-c x {"))
	  (setq back-button-global-forward-keystrokes '("C-c x }")))
  (setq back-button-local-keystrokes '("s-."))
  (setq back-button-local-backward-keystrokes '("s-["))
  (setq back-button-local-forward-keystrokes '("s-]"))
  (setq back-button-global-keystrokes '("s->"))
  (setq back-button-global-backward-keystrokes '("s-{"))
  (setq back-button-global-forward-keystrokes '("s-}")))
(require 'back-button)
(back-button-mode 1)
;; (global-set-key (kbd "s-[") 'back-button-local-backward)
;; (global-set-key (kbd "s-]") 'back-button-local-forward)
;; (global-set-key (kbd "s-{") 'back-button-global-backward)
;; (global-set-key (kbd "s-}") 'back-button-global-forward)
#+end_src
** highlight-thing
#+begin_src emacs-lisp
;; (require 'highlight-thing)
;; (global-highlight-thing-mode)
;; (dolist (hook (list
;;    			 'js-mode-hook
;;    			 'rust-mode-hook
;;    			 'python-mode-hook
;;    			 'ruby-mode-hook
;;    			 'java-mode-hook
;;    			 'sh-mode-hook
;;    			 'php-mode-hook
;;    			 'c-mode-common-hook
;;    			 'c-mode-hook
;;    			 'csharp-mode-hook
;;    			 'c++-mode-hook
;;    			 'haskell-mode-hook
;;    			 'go-mode-hook
;;    			 ))
;;    (add-hook hook '(lambda () (highlight-thing-mode))))
#+end_src
** awesome-pair
#+begin_src emacs-lisp
(require 'awesome-pair)
(dolist (hook (list
			   'c-mode-common-hook
			   'c-mode-hook
			   'c++-mode-hook
			   'java-mode-hook
			   'haskell-mode-hook
			   'emacs-lisp-mode-hook
			   'lisp-interaction-mode-hook
			   'lisp-mode-hook
			   'maxima-mode-hook
			   'ielm-mode-hook
			   'sh-mode-hook
			   'makefile-gmake-mode-hook
			   'php-mode-hook
			   'python-mode-hook
			   'js-mode-hook
			   'go-mode-hook
			   'qml-mode-hook
			   'jade-mode-hook
			   'css-mode-hook
			   'ruby-mode-hook
			   'coffee-mode-hook
			   'rust-mode-hook
			   'qmake-mode-hook
			   'lua-mode-hook
			   'swift-mode-hook
			   'minibuffer-inactive-mode-hook
			   ))
  (add-hook hook '(lambda () (awesome-pair-mode 1))))



(define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
(define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
(define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
(define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
(define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
(define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)
(define-key awesome-pair-mode-map (kbd "=") 'awesome-pair-equal)

;; (define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
(define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)

(define-key awesome-pair-mode-map (kbd "SPC") 'awesome-pair-space)

(define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
(define-key awesome-pair-mode-map (kbd "C-d") 'awesome-pair-forward-delete)
(define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)

(define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
(define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
(define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
(define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
(define-key awesome-pair-mode-map (kbd "M-)") 'awesome-pair-unwrap)

(define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-right)
(define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-left)
(define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline)
#+end_src

** minibuffer
#+begin_src emacs-lisp
(use-package mini-frame
  :if (not sys/win32p)
  :ensure t
  :config
  (mini-frame-mode))

;; git clone https://github.com/honmaple/emacs-maple-minibuffer ~/.emacs.d/lisp/maple-minibuffer

;;   (require 'maple-minibuffer)
;; ;;window-top-center
;;   (progn (setq maple-minibuffer:position-type 'frame-top-center
;; 			   maple-minibuffer:border-color "gray50"
;; 			   maple-minibuffer:height nil
;; 			   maple-minibuffer:width 0.7
;; 			   maple-minibuffer:cache t)

;; 		 (setq maple-minibuffer:action '(read-from-minibuffer read-string)
;; 			   maple-minibuffer:ignore-action '(evil-ex eval-expression))

;; 		 (add-to-list 'maple-minibuffer:ignore-action 'org-schedule)
;; 	;;(add-to-list 'maple-minibuffer:ignore-regexp "^helm-")

;; 	;; more custom parameters for frame
;; 	(defun maple-minibuffer:parameters ()
;; 	  "Maple minibuffer parameters."
;; 	  `((height . ,(or maple-minibuffer:height 10))
;; 		(width . ,(or maple-minibuffer:width (window-pixel-width)))
;; 		(left-fringe . 5)
;; 		(right-fringe . 5))))

;;   (maple-minibuffer-mode)

#+end_src
** ivy
#+begin_src emacs-lisp
;; (use-package ivy
;;   :ensure t
;;   :config
;;   (ivy-mode 1)
;;   (setq ivy-use-virtual-buffers t)
;;   (setq enable-recursive-minibuffers t)
;;   ;; enable this if you want `swiper' to use it
;;   ;; (setq search-default-mode #'char-fold-to-regexp)
;;   (global-set-key "\C-s" 'swiper)
;;   (global-set-key (kbd "C-c C-r") 'ivy-resume)
;;   ;; (global-set-key (kbd "<f6>") 'ivy-resume)
;;   ;;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;   ;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;   ;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;   ;;(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
;;   ;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
;;   ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;   ;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;   ;;(global-set-key (kbd "C-c g") 'counsel-git)
;;   ;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;;   ;;(global-set-key (kbd "C-c k") 'counsel-ag)
;;   ;;(global-set-key (kbd "C-x l") 'counsel-locate)
;;   ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;   ;;(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;;   )

#+end_src
** counsel
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :init
  (setq smex-save-file "~/.emacs.d/.smex-items")
  :config
  (smex-initialize)
  )
;; counsel ivy swiper
(use-package counsel
  :ensure t
  :init
  (ivy-mode 1)
  (setq ivy-re-builders-alist '((counsel-M-x . ivy--regex-fuzzy)
								(t . ivy--regex-plus)))
  :custom ((ivy-use-virtual-buffers t)
		   (ivy-count-format "(%d/%d) ")
		   (ivy-initial-inputs-alist nil)
		   (ivy-height 15)
		   (ivy-extra-directories '("./"))
		   (counsel-switch-buffer-preview-virtual-buffers nil))
  :bind (("M-y" . counsel-yank-pop)
		 ("C-c C-r" . ivy-resume)
		 ("<f6>" . ivy-resume)
		 ("M-x" . counsel-M-x)
		 ("C-x f" . counsel-switch-buffer)
		 ("C-x C-f" . counsel-find-file)
		 ("C-s" . swiper)
		 ("C-r" . swiper-isearch-backward)
		 ))

(use-package ivy-avy
  :custom ((avy-all-windows nil)
		   (avy-keys (number-sequence ?a ?z)))
  :bind (("C-x SPC" . avy-goto-char)
		 ("C-c j" . avy-goto-line)
		 ("C-C SPC" . avy-goto-word-1)))

#+end_src
** ivy-posframe mac 使用有bug.
#+begin_src emacs-lisp
;; ivy-posframe
;; (use-package ivy-posframe
;;   :ensure t
;;   :config
;;   ;; display at `ivy-posframe-style'
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
;;   (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
;;   (ivy-posframe-mode 1))
#+end_src
** undo tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode))
#+end_src
** jump-tree 跳转
包太老了. 没有办法用.
#+begin_src emacs-lisp
;; (use-package jump-tree
;;   :ensure t
;;   :config
;;   (global-jump-tree-mode)
;;   (add-to-list 'jump-tree-pos-list-record-commands 'xref-find-definitions)
;;   )
;; (jump-tree-jump-next)
#+end_src
** which-key 按键提示
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom))
#+end_src

** 打开的历史文件
#+begin_src emacs-lisp
(use-package recentf
  :ensure t
  :config
  (setq recentf-max-saved-items 200
		recentf-max-menu-items 15)
  ;;:bind ("<f3>" . helm-recentf)
  :hook ((after-init-hook . recentf-mode)))
#+end_src
** vterm
#+begin_src emacs-lisp
(when (or sys/linuxp sys/macp sys/mac-x-p sys/mac-cocoa-p)
  (use-package vterm
	:ensure t
	:bind (:map vterm-mode-map
		   ("C-`" . shell-pop))
	:init (setq vterm-always-compile-module t))
  )
;; (use-package vterm-toggle
;;   :ensure t
;;   :bind (("C-`" . vterm-toggle))
;;   :config
;;   (setq vterm-toggle-scope 'project)
;;   )

;; Shell Pop
(use-package shell-pop
  :ensure t
  :bind ("C-`" . shell-pop)
  :init (setq shell-pop-window-size 30
              shell-pop-shell-type
              (cond (sys/win32p '("eshell" "*eshell*" #'eshell))
					((fboundp 'vterm) '("vterm" "*vterm*" #'vterm))
					(t '("terminal" "*terminal*"
						 (lambda () (term shell-pop-term-shell)))))))

;; (use-package aweshell
;;   :ensure t
;;   :bind (("<f8>" . aweshell-dedicated-toggle)
;; 		 ("<f9>" . aweshell-toggle))
;;   :config
;;   (when (display-graphic-p)
;; 	(setq aweshell-use-exec-path-from-shell nil))
;;   (setq aweshell-auto-suggestion-p nil)
;;   (setq epe-git-dirty-char "✗")
;;   (setq-local company-backends '(company-capf)
;; 			  pcomplete-cycle-completions nil)
;;   (setq eshell-prompt-function
;; 		(lambda ()
;; 		  (setq eshell-prompt-regexp "^[^#$\n]*[#$] ")
;; 		  (concat "\033[32m➜\033[0m \033[36m"
;; 				  (abbreviate-file-name (eshell/pwd))
;; 				  "\033[0m "
;; 				  (when (epe-git-p)
;; 					(concat "\e[34mgit:(\e[0m\e[31m"
;; 							(epe-git-branch)
;; 							"\e[0m\e[34m)\e[0m"))
;; 				  (if (= (user-uid) 0) "\e[31m#\e[0m " "\e[34m$\e[0m ")
;; 				  (when (epe-git-p)
;; 					(concat "\e[37m"
;; 							(epe-git-dirty)
;; 							(epe-git-untracked)
;; 							(let ((unpushed (epe-git-unpushed-number)))
;; 							  (unless (= unpushed 0)
;; 								(concat ":" (number-to-string unpushed))))
;; 							"\e[0m"))
;; 				  "\n"))))

#+end_src
** vtm 管理多个vtertm
#+begin_src emacs-lisp
(use-package vtm
  :ensure t
  :config
  (setq vtm-edit-mode nil)
  )
#+end_src

** git
#+begin_src emacs-lisp
;; git 支持
(use-package magit
  :ensure t
  :bind
  (:map global-map
   ("C-c g b" . 'magit-blame-addition)))
;; 缓冲区中查看.修改,暂存文件
(use-package git-gutter+
  :ensure t
  :config
  (global-git-gutter+-mode))
#+end_src

*** magit blame 快捷键
#+begin_center
(define-key map (kbd "C-m") 'magit-show-commit)
(define-key map (kbd   "p") 'magit-blame-previous-chunk)
(define-key map (kbd   "P") 'magit-blame-previous-chunk-same-commit)
(define-key map (kbd   "n") 'magit-blame-next-chunk)
(define-key map (kbd   "N") 'magit-blame-next-chunk-same-commit)
(define-key map (kbd   "b") 'magit-blame-addition)
(define-key map (kbd   "r") 'magit-blame-removal)
(define-key map (kbd   "f") 'magit-blame-reverse)
(define-key map (kbd   "B") 'magit-blame)
(define-key map (kbd   "c") 'magit-blame-cycle-style)
(define-key map (kbd   "q") 'magit-blame-quit)
(define-key map (kbd "M-w") 'magit-blame-copy-hash)
(define-key map (kbd "SPC") 'magit-diff-show-or-scroll-up)
(define-key map (kbd "S-SPC") 'magit-diff-show-or-scroll-down)
(define-key map (kbd "DEL") 'magit-diff-show-or-scroll-down)
#+end_center

** 智能tab补全
#+begin_src emacs-lisp
;; 智能tab补全. 有个新的 smart-tab-mode
(use-package smart-tabs-mode
  :ensure t
  :hook ((prog-mode . smart-tabs-mode)))
#+end_src
** 智能跳转行首和行尾
#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end))
#+end_src
** 快速选择窗口
#+begin_src emacs-lisp
;; (use-package ace-window
;;   :ensure t

;;   :bind
;;   ("M-o" . ace-window))
(use-package window-numbering
  :ensure t
  :init (window-numbering-mode 1))
#+end_src
** 剪切板 kill ring
类似于vscode的clipboard. 但是没有快速选择的方式
#+begin_src emacs-lisp
;; (global-set-key "\C-xy" '(lambda ()
;;                                 (interactive)
;;                                 (popup-menu 'yank-menu)))
(use-package browse-kill-ring
  :ensure t
  :bind
  (:map global-map
   ("C-c k" . 'browse-kill-ring)
   ("C-c C-k" . 'browse-kill-ring))
  :config
  ;; 高亮当前选择项
  (setq browse-kill-ring-highlight-current-entry t)
  )
#+end_src
** company自动补全
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode)
  ;; (add-to-list 'company-backends #'company-tabnine)
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  ;; show quik select number
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 1)
  ;; 大小写问题修复
  (setq company-dabbrev-downcase nil)
  ;; (setq company-dabbrev-code-everywhere t)
  )
;;  (use-package company-tabnine
;;	:custom ((company-tabnine-always-trigger nil)))

#+end_src
** 翻译,英文字典
#+begin_src emacs-lisp
;; google 翻译
(use-package go-translate
  :ensure t
  :config
  (setq gts-translate-list '(("en" "zh")))
  ;; 配置默认的 translator
  ;; 这些配置将被 gts-do-translate 命令使用
  (setq gts-default-translator
		(gts-translator
		 :picker ; 用于拾取初始文本、from、to，只能配置一个
		 (gts-noprompt-picker)
		 ;;(gts-noprompt-picker :texter (gts-whole-buffer-texter))
		 ;;(gts-prompt-picker)
		 ;;(gts-prompt-picker :single t)
		 ;; (gts-prompt-picker :texter (gts-current-or-selection-texter) :single t)

		 :engines ; 翻译引擎，可以配置多个。另外可以传入不同的 Parser 从而使用不同样式的输出
		 (list
          (gts-bing-engine)
          ;;(gts-google-engine)
          ;;(gts-google-rpc-engine)
          ;;(gts-deepl-engine :auth-key [YOUR_AUTH_KEY] :pro nil)
          (gts-google-engine :parser (gts-google-summary-parser))
          ;;(gts-google-engine :parser (gts-google-parser))
          ;;(gts-google-rpc-engine :parser (gts-google-rpc-summary-parser))
          (gts-google-rpc-engine :parser (gts-google-rpc-parser))
          )

		 :render ; 渲染器，只能一个，用于输出结果到指定目标。如果使用 childframe 版本的，需自行安装 posframe

		 (gts-buffer-render)
		 ;;(gts-posframe-pop-render)
		 ;;(gts-posframe-pop-render :backcolor "#333333" :forecolor "#ffffff")
		 ;;(gts-posframe-pin-render)
		 ;;(gts-posframe-pin-render :position (cons 1200 20))
		 ;;(gts-posframe-pin-render :width 80 :height 25 :position (cons 1000 20) :forecolor "#ffffff" :backcolor "#111111")
		 ;;(gts-kill-ring-render)
		 ))

  ;; 用于代码注释翻译 去除注释token。 
  (defun aggron/trim-string (text)
	"trim newline"
	;; (rx (or "//" "--" "/*" "*/" "^#" ";;"))
	(string-join (split-string (replace-regexp-in-string "\\(?:\\*/\\|--\\|/[*/]\\|;;\\|\\^#\\)" "" (string-trim text))) " "))
  ;; 待翻译的文本
  (defun aggron/go-translate-current-text ()
    "Get current text under cursor, selection or word."
    (cond ((eq major-mode 'pdf-view-mode)
           (if (pdf-view-active-region-p)
               (car (pdf-view-active-region-text))))
          ((use-region-p)
           (aggron/trim-string (buffer-substring-no-properties (region-beginning) (region-end))))
          (t (current-word t t))))

  ;; go-translate 定制texter
  (defclass aggron/gts-code-comment-texter (gts-texter) ())
  ;; go-translate texter gts-text 实现
  (cl-defmethod gts-text ((_ aggron/gts-code-comment-texter))
	(aggron/go-translate-current-text))

  ;; 代码注释翻译tranlater
  (defvar aggron/translate-code-comment-tranlater
	(gts-translator
	 :picker (gts-noprompt-picker
			  :texter (aggron/gts-code-comment-texter))
	 :engines (list 
			   (gts-google-engine)
			   (gts-bing-engine))
	 ;; render 
	 :render (gts-buffer-render)
	 ))

  ;; 翻译代码注释命令。去除"//"等注释token和换行。
  (defun aggron/translate-code-comment-command ()
	(interactive)
	(gts-translate aggron/translate-code-comment-tranlater))

  ;; 将翻译放入剪切板
  (defvar aggron/translate-copy-tranlater
	(gts-translator
	 :picker (gts-noprompt-picker
			  :texter (aggron/gts-code-comment-texter))
	 :engines (list 
			   (gts-bing-engine)
			   (gts-google-engine))
	 :render (gts-kill-ring-render)
	 ))

  (defun aggron/translate-comment-copy-command()
	(interactive)
	(gts-translate aggron/translate-copy-tranlater))
  ;; 插入翻译文字
  (require 'insert-translated-name)
  ;; (global-set-key (kbd "C-c e e") 'insert-translated-name-insert-original-translation)
  ;; (global-set-key (kbd "C-c e v") 'insert-translated-name-insert-with-camel)
  ;; (global-set-key (kbd "C-c e u") 'insert-translated-name-insert-with-underline)
  ;; (global-set-key (kbd "C-c e r") 'insert-translated-name-replace)


  ;; 写英文帮助
  (require 'company-english-helper)
  ;; (global-set-key (kbd "C-c e h") 'toggle-company-english-helper)

  :bind
  (:map global-map
   ("C-c y" . aggron/translate-code-comment-command)
   ("C-c e y" . gts-do-translate)
   ("C-c e c" . aggron/translate-comment-copy-command)
   ("C-c e h" . toggle-company-english-helper)
   ("C-c e e" . insert-translated-name-insert-original-translation)
   ("C-c e v" . insert-translated-name-insert-with-camel)
   ("C-c e u" . insert-translated-name-insert-with-underline)
   ("C-c e r" . insert-translated-name-replace)
   )
  )

;; 有道词典
;; (use-package youdao-dictionary
;;   :ensure t
;;   :bind
;;   (:map global-map
;; 		;; 会自动隐藏. 但是对于查看长文档翻译时候,不太方便
;; 	;; ("C-c y" . youdao-dictionary-search-at-point-tooltip)
;; 	;; 不会移动隐藏.但是有操作会隐藏
;; 	("C-c y" . youdao-dictionary-search-at-point+))
;;   :config
;;   ;; Enable Cache
;;   (setq url-automatic-caching t)
;;   ;; Integrate with popwin-el (https://github.com/m2ym/popwin-el)
;;   ;; (push "*Youdao Dictionary*" popwin:special-display-config)

;;   ;; Set file path for saving search history
;;   (setq youdao-dictionary-search-history-file "~/.emacs.d/.youdao")

;;   ;; Enable Chinese word segmentation support (支持中文分词)
;;   ;; (setq youdao-dictionary-use-chinese-word-segmentation t)
;;   )
#+end_src
** 书签
#+begin_src emacs-lisp
(use-package bm
  :ensure t
  :demand t

  :init
  ;; restore on load (even before you require bm)
  (setq bm-restore-repository-on-load t)


  :config
  ;; Allow cross-buffer 'next'
  (setq bm-cycle-all-buffers t)

  ;; where to store persistant files
  (setq bm-repository-file "~/.emacs.d/bm-repository")

  ;; save bookmarks
  (setq-default bm-buffer-persistence t)

  ;; Loading the repository from file when on start up.
  (add-hook 'after-init-hook 'bm-repository-load)

  ;; Saving bookmarks
  (add-hook 'kill-buffer-hook #'bm-buffer-save)

  ;; Saving the repository to file when on exit.
  ;; kill-buffer-hook is not called when Emacs is killed, so we
  ;; must save all bookmarks first.
  (add-hook 'kill-emacs-hook #'(lambda nil
								 (bm-buffer-save-all)
								 (bm-repository-save)))

  ;; The `after-save-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state.
  (add-hook 'after-save-hook #'bm-buffer-save)

  ;; Restoring bookmarks
  (add-hook 'find-file-hooks   #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)

  ;; The `after-revert-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state. This hook might cause trouble when using packages
  ;; that automatically reverts the buffer (like vc after a check-in).
  ;; This can easily be avoided if the package provides a hook that is
  ;; called before the buffer is reverted (like `vc-before-checkin-hook').
  ;; Then new bookmarks can be saved before the buffer is reverted.
  ;; Make sure bookmarks is saved before check-in (and revert-buffer)
  (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


  :bind (("<f2>" . bm-next)
		 ("M-<f2>" . bm-previous)
		 ("C-<f2>" . bm-toggle)
		 ("<f1>" . bm-toggle))
  )
#+end_src
** multiple-cursors 多列编辑
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (:map global-map
   ;; M-I(Ctrl-Shirft-i) vscode快捷键. 先选中一块区域.按下快捷键之后,每行添加光标
   ("M-I" . 'mc/edit-lines)
   ;; 下一行相似的
   ("C->" . 'mc/mark-next-like-this)
   ;; 上一行相似的
   ("C-<" . 'mc/mark-previous-like-this)
   ;; 所有匹配的行
   ("C-c C-<" . 'mc/mark-all-like-this)
   ;; 插入数字
   ;;("M-N" . '@-ask- 'mc/insert-numbers)
   )
  )
;; 按回车. 插入新行.使用C-g退出多行
(define-key mc/keymap (kbd "<return>") nil)
;; 鼠标点选某一行
(global-unset-key (kbd "M-<down-mouse-1>"))
(global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

(defun ask-number ()
  (let ((val (string-to-number(read-from-minibuffer "Enter Start Number "))))
	(if (integerp val)
		val
	  (ask-number))))

(defun @-ask-inter-num ()
  (interactive)
  (mc/insert-numbers (ask-number)))
;; 手动输入数字起始(默认是0)
(global-set-key (kbd "M-N") '@-ask-inter-num)
#+end_src
** 高亮代码中的todo
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook
  (prog-mode . hl-todo-mode)
  (text-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
		'(("TODO"   . "#FF0000")
		  ("FIXME"  . "#FF0000")
		  ("DEBUG"  . "#A020F0")
		  ("GOTCHA" . "#FF4500")
		  ("STUB"   . "#1E90FF")
		  ("NOTE"   . "#36bf36"))
		))
#+end_src
** git/todo 搜集代码中的todo
#+begin_src emacs-lisp
;; (use-package dash
;;   :ensure t)
;; (use-package pcre2el
;;   :ensure t)
;; (use-package f
;;   :ensure t)
;; (use-package async
;;   :ensure t)
;; (use-package s
;;   :ensure t)

;; (use-package magit-todos
;;   :ensure t
;;   :init
;;   (require 'dash)
;;   (require 'pcre2el)
;;   (require 'f)
;;   (require 'async)
;;   (require 's)
;;   :commands (magit-todos-mode)
;;   :config
;;   ;; (setq magit-todos-recursive t)
;;   ;; (setq magit-todos-depth 100)
;;   ;; 这个是不包含的文件
;;   ;; (setq magit-todos-exclude-globs '("*.html"))
;;   ;; 修改匹配后缀 原始 => "\\(?:([^)]+)\\)?:"
;;   ;; (setq magit-todos-keyword-suffix "")
;;   :hook
;;   (magit-mode . magit-todos-mode)
;;   )
;; 使用过程中. 发现. 如果使用treemacs 打开目录. 打开 magit. magit 正常. 但是magit-todos 没有显示. 需要打开一个项目文件才行.

;; (setq magit-todos-nice nil)

#+end_src
** rg 支持
#+begin_src emacs-lisp
(use-package rg
  :ensure t
  ;; :bind
  ;; (:map global-map
  ;; ("C-c s" rg-menu))

  :config
  (rg-enable-default-bindings)
  )
;; (rg-enable-menu)
#+end_src
** 折叠
#+begin_src emacs-lisp
;; (hs-minor-mode t)
;; (define-globalized-minor-mode global-hs-minor-mode hs-minor-mode
;;   (lambda () (hs-minor-mode)))
;; (global-hs-minor-mode 1)
;; (defun czy-hs-hooks ())
;; (add-hook 'hs-minor-mode-hook #'czy-hs-hooks)
;;(hs-minor-mode)

(use-package hideshow
  :ensure nil
  :hook (prog-mode . hs-minor-mode)
  :config
  (defun my/toggle-fold ()
	(interactive)
	(save-excursion
	  (end-of-line)
	  (if (hs-already-hidden-p)
		  (hs-show-block)
		(hs-hide-block))))
  :bind (:map prog-mode-map
		 ("C-c o" . my/toggle-fold)
		 ("C-c h a" . hs-hide-block)
		 ("C-c h b" . hs-show-block)
		 ("C-c h h" . hs-hide-all)
		 ("C-c h s" . hs-show-all)
		 ("C-c h t" . hs-toggle-hiding)
		 )
  )
;; (global-set-key "\C-cha"	      'hs-hide-block)
;; (global-set-key "\C-chb"	      'hs-show-block)
;; (global-set-key "\C-chh"          'hs-hide-all)
;; (global-set-key "\C-chs"          'hs-show-all)
;; (global-set-key "\C-cht"	      'hs-toggle-hiding)
#+end_src

** ibuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
  :config
  ;; ;; Display icons for buffers
  ;; (use-package all-the-icons-ibuffer
  ;;   :init
  ;;   (setq all-the-icons-ibuffer-icon centaur-icon)
  ;;   (all-the-icons-ibuffer-mode 1))

  (with-eval-after-load 'counsel
    (with-no-warnings
      (defun my-ibuffer-find-file ()
        (interactive)
        (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                   (if (buffer-live-p buf)
                                       (with-current-buffer buf
                                         default-directory)
                                     default-directory))))
          (counsel-find-file default-directory)))
      (advice-add #'ibuffer-find-file :override #'my-ibuffer-find-file))))

;; Group ibuffer's list by project root
(use-package ibuffer-projectile
  :ensure t
  :functions all-the-icons-octicon ibuffer-do-sort-by-alphabetic
  :hook ((ibuffer . (lambda ()
                      (ibuffer-projectile-set-filter-groups)
                      (unless (eq ibuffer-sorting-mode 'alphabetic)
                        (ibuffer-do-sort-by-alphabetic)))))
  :config
  (setq ibuffer-projectile-prefix
        (if (icons-displayable-p)
            (concat
             (all-the-icons-octicon "file-directory"
                                    :face ibuffer-filter-group-name-face
                                    :v-adjust 0.0
                                    :height 1.0)
             " ")
          "Project: ")))
#+end_src
** helpful
#+begin_src emacs-lisp
;; A better *Help* buffer
(use-package helpful
  :ensure t
  :defines (counsel-describe-function-function
            counsel-describe-variable-function)
  :commands helpful--buffer
  :bind (([remap describe-key] . helpful-key)
         ([remap describe-symbol] . helpful-symbol)
		 ([remap describe-function] . helpful-function)
		 ([remap describe-variable] . helpful-variable)
         ("C-c C-d" . helpful-at-point)
         :map helpful-mode-map
         ("r" . remove-hook-at-point))
  :hook (helpful-mode . cursor-sensor-mode) ; for remove-advice button
  :init
  (with-eval-after-load 'counsel
    (setq counsel-describe-function-function #'helpful-callable
          counsel-describe-variable-function #'helpful-variable))

  (with-eval-after-load 'apropos
    ;; patch apropos buttons to call helpful instead of help
    (dolist (fun-bt '(apropos-function apropos-macro apropos-command))
      (button-type-put
       fun-bt 'action
       (lambda (button)
         (helpful-callable (button-get button 'apropos-symbol)))))
    (dolist (var-bt '(apropos-variable apropos-user-option))
      (button-type-put
       var-bt 'action
       (lambda (button)
         (helpful-variable (button-get button 'apropos-symbol))))))
  :config
  (with-no-warnings
    ;; Open the buffer in other window
    (defun my-helpful--navigate (button)
      "Navigate to the path this BUTTON represents."
      (find-file-other-window (substring-no-properties (button-get button 'path)))
      ;; We use `get-text-property' to work around an Emacs 25 bug:
      ;; http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=f7c4bad17d83297ee9a1b57552b1944020f23aea
      (-when-let (pos (get-text-property button 'position
                                         (marker-buffer button)))
        (helpful--goto-char-widen pos)))
    (advice-add #'helpful--navigate :override #'my-helpful--navigate)))
#+end_src
* 文件格式
** elisp
#+begin_src emacs-lisp
;; Emacs lisp mode
(use-package elisp-mode
  :ensure nil
  :defines flycheck-disabled-checkers
  :bind (:map emacs-lisp-mode-map
         ("C-c C-x" . ielm)
         ("C-c C-c" . eval-defun)
         ("C-c C-b" . eval-buffer))
  :hook (emacs-lisp-mode . (lambda ()
                             "Disable the checkdoc checker."
                             (setq-local flycheck-disabled-checkers
                                         '(emacs-lisp-checkdoc))))
  :config
  (when (boundp 'elisp-flymake-byte-compile-load-path)
    (add-to-list 'elisp-flymake-byte-compile-load-path load-path))

  ;; Syntax highlighting of known Elisp symbols
  (use-package highlight-defined
	:ensure t
    :hook (emacs-lisp-mode . highlight-defined-mode)
    :init (setq highlight-defined-face-use-itself t))

  (with-no-warnings
    ;; Align indent keywords
    ;; @see https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned
    (defun my-lisp-indent-function (indent-point state)
      "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.

INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.

If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:

,* `defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);

,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;

,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.

This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
      (let ((normal-indent (current-column))
            (orig-point (point)))
        (goto-char (1+ (elt state 1)))
        (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
        (cond
         ;; car of form doesn't seem to be a symbol, or is a keyword
         ((and (elt state 2)
               (or (not (looking-at "\\sw\\|\\s_"))
                   (looking-at ":")))
          (if (not (> (save-excursion (forward-line 1) (point))
                      calculate-lisp-indent-last-sexp))
              (progn (goto-char calculate-lisp-indent-last-sexp)
                     (beginning-of-line)
                     (parse-partial-sexp (point)
                                         calculate-lisp-indent-last-sexp 0 t)))
          ;; Indent under the list or under the first sexp on the same
          ;; line as calculate-lisp-indent-last-sexp.  Note that first
          ;; thing on that line has to be complete sexp since we are
          ;; inside the innermost containing sexp.
          (backward-prefix-chars)
          (current-column))
         ((and (save-excursion
                 (goto-char indent-point)
                 (skip-syntax-forward " ")
                 (not (looking-at ":")))
               (save-excursion
                 (goto-char orig-point)
                 (looking-at ":")))
          (save-excursion
            (goto-char (+ 2 (elt state 1)))
            (current-column)))
         (t
          (let ((function (buffer-substring (point)
                                            (progn (forward-sexp 1) (point))))
                method)
            (setq method (or (function-get (intern-soft function)
                                           'lisp-indent-function)
                             (get (intern-soft function) 'lisp-indent-hook)))
            (cond ((or (eq method 'defun)
                       (and (null method)
                            (> (length function) 3)
                            (string-match "\\`def" function)))
                   (lisp-indent-defform state indent-point))
                  ((integerp method)
                   (lisp-indent-specform method state
                                         indent-point normal-indent))
                  (method
                   (funcall method indent-point state))))))))
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local lisp-indent-function #'my-lisp-indent-function)))

    ;; Add remove buttons for advices
    (add-hook 'help-mode-hook 'cursor-sensor-mode)

    (defun function-advices (function)
      "Return FUNCTION's advices."
      (let ((flist (indirect-function function)) advices)
        (while (advice--p flist)
          (setq advices `(,@advices ,(advice--car flist)))
          (setq flist (advice--cdr flist)))
        advices))

    (defun add-remove-advice-button (advice function)
      (when (and advice (symbolp advice))
        (let ((inhibit-read-only t))
          (insert "\t")
          (insert-text-button
           "[Remove]"
           'cursor-sensor-functions `((lambda (&rest _) (message "Remove advice `%s'" ',advice)))
           'help-echo (format "Remove advice `%s'" advice)
           'action (lambda (_)
                     (when (yes-or-no-p (format "Remove advice `%s'?" advice))
                       (message "Removing advice `%s' from function `%s'" advice function)
                       (advice-remove function advice)
                       (if (eq major-mode 'helpful-mode)
                           (helpful-update)
                         (revert-buffer nil t))))
           'follow-link t))))

    (defun add-button-to-remove-advice (buffer-name function)
      "Add a button to remove advice."
      (when (get-buffer buffer-name)
        (with-current-buffer buffer-name
          (save-excursion
            (goto-char (point-min))
            (let ((ad-list (function-advices function)))
              (while (re-search-forward "^\\(?:This function has \\)?:[-a-z]+ advice: \\(.+\\)\\.$" nil t)
                (let* ((name (string-trim (match-string 1) "[‘'`]" "[’']"))
                       (advice (intern-soft name)))
                  (when (memq advice ad-list)
                    (add-remove-advice-button advice function)
                    (setq ad-list (delq advice ad-list)))))

              ;; Search `:around' advice
              (goto-char (point-min))
              (when (re-search-forward "^This function is advised.$" nil t)
                (add-remove-advice-button (car ad-list) function)))))))

    (define-advice describe-function-1 (:after (function) advice-remove-button)
      (add-button-to-remove-advice "*Help*" function))
    (with-eval-after-load 'helpful
      (define-advice helpful-update (:after () advice-remove-button)
        (when helpful--callable-p
          (add-button-to-remove-advice (helpful--buffer helpful--sym t) helpful--sym))))

    ;; Remove hooks
    (defun remove-hook-at-point ()
      "Remove the hook at the point in the *Help* buffer."
      (interactive)
      (unless (or (eq major-mode 'help-mode)
                  (eq major-mode 'helpful-mode)
                  (string= (buffer-name) "*Help*"))
        (error "Only for help-mode or helpful-mode"))
      (let ((orig-point (point)))
        (save-excursion
          (when-let
              ((hook (progn (goto-char (point-min)) (symbol-at-point)))
               (func (when (and
                            (or (re-search-forward (format "^Value:?[\s|\n]") nil t)
                                (goto-char orig-point))
                            (sexp-at-point))
                       (end-of-sexp)
                       (backward-char 1)
                       (catch 'break
                         (while t
                           (condition-case _err
                               (backward-sexp)
                             (scan-error (throw 'break nil)))
                           (let ((bounds (bounds-of-thing-at-point 'sexp)))
                             (when (<= (car bounds) orig-point (cdr bounds))
                               (throw 'break (sexp-at-point)))))))))
            (when (yes-or-no-p (format "Remove %s from %s? " func hook))
              (remove-hook hook func)
              (if (eq major-mode 'helpful-mode)
                  (helpful-update)
                (revert-buffer nil t)))))))
    (bind-key "r" #'remove-hook-at-point help-mode-map)))

;; ;; Show function arglist or variable docstring
;; ;; `global-eldoc-mode' is enabled by default.
;; (use-package eldoc
;;   :ensure nil
;;   :diminish
;;   :config
;;   (with-no-warnings
;;     ;; Display `eldoc' in child frame
;;     (when (and (require 'posframe nil t) (posframe-workable-p))
;;       (defvar eldoc-posframe-buffer "*eldoc-posframe-buffer*"
;;         "The posframe buffer name use by eldoc-posframe.")

;;       (defvar eldoc-posframe-hide-posframe-hooks
;;         '(pre-command-hook post-command-hook focus-out-hook)
;;         "The hooks which should trigger automatic removal of the posframe.")

;;       (defvar eldoc-posframe-delay 0.2
;;         "Delay seconds to display `eldoc'.")

;;       (defvar-local eldoc-posframe--timer nil)

;;       (defun eldoc-posframe-hide-posframe ()
;;         "Hide messages currently being shown if any."
;;         (when eldoc-posframe--timer
;;           (cancel-timer eldoc-posframe--timer))

;;         (posframe-hide eldoc-posframe-buffer)
;;         (dolist (hook eldoc-posframe-hide-posframe-hooks)
;;           (remove-hook hook #'eldoc-posframe-hide-posframe t)))

;;       (defun eldoc-posframe-show-posframe (str &rest args)
;;         "Display STR with ARGS."
;;         (when eldoc-posframe--timer
;;           (cancel-timer eldoc-posframe--timer))

;;         (posframe-hide eldoc-posframe-buffer)
;;         (dolist (hook eldoc-posframe-hide-posframe-hooks)
;;           (add-hook hook #'eldoc-posframe-hide-posframe nil t))

;; 		(message (concat "test-checkstr" str))

;;         (setq eldoc-posframe--timer
;;               (run-with-idle-timer
;;                eldoc-posframe-delay nil
;;                (lambda ()
;;                  (when str
;;                    (posframe-show
;;                     eldoc-posframe-buffer
;;                     :string (concat (propertize "\n" 'face '(:height 0.3))
;;                                     (apply #'format str args)
;;                                     (propertize "\n\n" 'face '(:height 0.3)))
;;                     :postion (point)
;;                     :left-fringe 8
;;                     :right-fringe 8
;;                     :poshandler #'posframe-poshandler-point-bottom-left-corner-upward
;;                     :internal-border-width 1
;;                     :internal-border-color (face-foreground 'font-lock-comment-face nil t)
;;                     :background-color (face-background 'tooltip nil t)))))))
;;       (add-hook 'emacs-lisp-mode-hook
;;                 (lambda ()
;;                   (setq-local eldoc-message-function #'eldoc-posframe-show-posframe))))))

;; Interactive macro expander
(use-package macrostep
  :ensure t
  :custom-face
  (macrostep-expansion-highlight-face ((t (:inherit tooltip :extend t))))
  :bind (:map emacs-lisp-mode-map
         ("C-c e" . macrostep-expand)
         :map lisp-interaction-mode-map
         ("C-c e" . macrostep-expand)))

#+end_src

** json
#+begin_src emacs-lisp
(use-package json-mode
  :ensure t)
;;:hook ((json-mode . lsp)))
#+end_src
** yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\|ymal\\'")
;; :hook ((yaml-mode . lsp)))
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
		 ("\\.md\\'" . markdown-mode)
		 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
** toml
#+begin_src emacs-lisp
(use-package toml-mode
  :ensure t)
;; :hook ((toml-mode . lsp)))
#+end_src

** docker file
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t)
;; :hook ((dockerfile-mode . lsp)))
#+end_src

** protobuf
#+begin_src emacs-lisp
(use-package protobuf-mode
  :ensure t)
;; :hook ((protobuf-mode . lsp)))
(defconst my-protobuf-style
  '((indent-tabs-mode . nil)))

(add-hook 'protobuf-mode-hook
		  (lambda () (c-add-style "my-style" my-protobuf-style t)))
#+end_src

** thrift
#+begin_src emacs-lisp
(use-package thrift
  :ensure t)
#+end_src
** plantuml
#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; jar 配置
  (setq plantuml-jar-path "~/.emacs.d/plantuml.1.2020.19.jar")
  (setq plantuml-default-exec-mode 'jar)
  (setq plantuml-indent-level 2)
  (add-to-list
   'org-src-lang-modes '("plantuml" . plantuml))
    ;;;; 使用server
  ;; (setq plantuml-default-exec-mode 'server)
  ;; (setq plantuml-server-url "https://www.plantuml.com/plantuml")
  ;; 执行文件
  ;;(setq plantuml-executable-path "")
  ;;(setq plantuml-default-exec-mode 'executable)
  )
#+end_src
** pdf
#+begin_src emacs-lisp
(when (and (display-graphic-p) (not sys/win32p))
  (use-package pdf-tools
	:ensure nil
	;; :init

	:config
	(pdf-tools-install)
	;; (setq pdf-view-dark-minor-mode t)
	(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode) 
	))
#+end_src
* 编程支持
** flyspell 拼写检查
禁用拼写检查. 看着好闹心.
#+begin_src emacs-lisp
;; flyspell 拼写检查
;;(use-package flyspell
;;  ;;:ensure t
;;  :disabled
;;  :config
;;  (flyspell-mode +1))
;; (add-hook 'before-save-hook (lambda () (flyspell-buffer)))
;;(add-hook 'text-mode-hook 'flyspell-mode)
;;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t)
#+end_src
** lsp 语言服务器
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred)
  :hook(
		(go-mode . lsp-deferred)
		(lsp-mode . lsp-enable-which-key-integration)
		)
  :bind (:map lsp-mode-map
		 ("M-." . lsp-find-definition)
		 ("M-n" . lsp-find-references))
  :custom ((lsp-log-io nil)
		   (lsp-eldoc-render-all nil)
		   (lsp-completion-provider t)
		   (lsp-signature-render-documentation nil)
		   (lsp-go-hover-kind "NoDocumentation")
		   (lsp-go-use-placeholders t)
		   ;; 语法检测
		   ;; (lsp-diagnostics-provider :none)
		   ;; (lsp-modeline-diagnostics-enable nil)
		   (lsp-file-watch-threshold 2000))
  )
#+end_src
** lsp-ui
#+begin_src emacs-lisp
;; Optional - provides fancier overlays.
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
#+end_src
** nox 替代 lsp-mode
#+begin_src emacs-lisp
;; (require 'nox)

;; (dolist (hook (list
;; 			   'js-mode-hook
;; 			   'rust-mode-hook
;; 			   'python-mode-hook
;; 			   'ruby-mode-hook
;; 			   'java-mode-hook
;; 			   'sh-mode-hook
;; 			   'php-mode-hook
;; 			   ;'c-mode-common-hook
;; 			   'c-mode-hook
;; 			   'csharp-mode-hook
;; 			   'c++-mode-hook
;; 			   'haskell-mode-hook
;; 			   'go-mode-hook
;; 			   ))
;;   (add-hook hook '(lambda () (nox-ensure))))

;;   (global-set-key (kbd "M-9") 'imenu)
;;   (global-set-key (kbd "M-8") 'nox-show-doc)

#+end_src
** dap-mode (调试支持)
#+begin_src emacs-lisp
(when (display-graphic-p)
  (use-package dap-mode
	:ensure t))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
;; Optional - provides snippet support.
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook
  (go-mode . yas-minor-mode)
  (lua-mode . yas-minor-mode))

;; 预定义的
(use-package yasnippet-snippets
  :ensure t)
#+end_src
** project支持
#+begin_src emacs-lisp
;; (use-package find-file-in-project
;;   :ensure t
;;   :bind
;;   ("M-P" . find-file-in-project))
;; 项目支持
(use-package projectile
  :ensure t
  ;; C-x p 前缀 f 查找文件
  :bind
  (:map global-map
   ("M-P" . project-find-file))
  :config
  (projectile-mode +1)
  ;; (if (or sys/macp sys/mac-x-p sys/mac-cocoa-p)
  ;;     ;; Recommended keymap prefix on macOS
  ;;     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  ;;   )
  ;; (if (or sys/linuxp sys/win32p)
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;;)
  )
#+end_src
** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  ;; :init
  ;; (with-eval-after-load 'winum
  ;;  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
	(setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
		  treemacs-deferred-git-apply-delay      0.5
		  treemacs-directory-name-transformer    #'identity
		  treemacs-display-in-side-window        t
		  treemacs-eldoc-display                 t
		  treemacs-file-event-delay              5000
		  treemacs-file-extension-regex          treemacs-last-period-regex-value
		  treemacs-file-follow-delay             0.2
		  treemacs-file-name-transformer         #'identity
		  treemacs-follow-after-init             t
		  treemacs-git-command-pipe              ""
		  treemacs-goto-tag-strategy             'refetch-index
		  treemacs-indentation                   2
		  treemacs-indentation-string            " "
		  treemacs-is-never-other-window         nil
		  treemacs-max-git-entries               5000
		  treemacs-missing-project-action        'ask
		  treemacs-move-forward-on-expand        nil
		  treemacs-no-png-images                 nil
		  treemacs-no-delete-other-windows       t
		  treemacs-project-follow-cleanup        nil
		  treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
		  treemacs-position                      'left
		  treemacs-recenter-distance             0.1
		  treemacs-recenter-after-file-follow    nil
		  treemacs-recenter-after-tag-follow     nil
		  treemacs-recenter-after-project-jump   'always
		  treemacs-recenter-after-project-expand 'on-distance
		  treemacs-show-cursor                   nil
		  treemacs-show-hidden-files             t
		  treemacs-silent-filewatch              nil
		  treemacs-silent-refresh                nil
		  treemacs-sorting                       'alphabetic-asc
		  treemacs-space-between-root-nodes      t
		  treemacs-tag-follow-cleanup            t
		  treemacs-tag-follow-delay              1.5
		  treemacs-user-mode-line-format         nil
		  treemacs-user-header-line-format       nil
		  treemacs-width                         35
		  treemacs-workspace-switch-cleanup      nil)

	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode t)
	(pcase (cons (not (null (executable-find "git")))
				 (not (null treemacs-python-executable)))
	  (`(t . t)
	   (treemacs-git-mode 'deferred))
	  (`(t . _)
	   (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
   ("<f12>"       . treemacs-select-window)
   ("C-x t 1"   . treemacs-delete-other-windows)
   ("C-x t t"   . treemacs)
   ;;("C-x t B"   . treemacs-bookmark)
   ;;("C-x t C-t" . treemacs-find-file)
   ("C-x t M-t" . treemacs-find-tag)
   ;; ("j" . treemacs-next-line)
   ;; ("k" . treemacs-previous-line)
   )
  (:map treemacs-mode-map
   ("j" . treemacs-next-line)
   ("k" . treemacs-previous-line)
   )
  )

;;(use-package treemacs-evil
;;  :after treemacs evil
;;  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
  :after treemacs persp-mode ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package lsp-treemacs
  :ensure t
  :config
  (lsp-treemacs-sync-mode 1)
  ;; 将窗口放在右边.
  (setq lsp-treemacs-symbols-position-params  `((side . right)
												(slot . 1)
												(window-width . 100)))
  :bind
  ;; 添加快捷键
  ("s-3" . lsp-treemacs-symbols)
  ("s-1" . 'imenu)
  ("s-2" . lsp-treemacs-errors-list)
  ("C-c 1" . 'imenu)
  ("C-c 2" . lsp-treemacs-errors-list)
  ("C-c 3" . lsp-treemacs-symbols)
  )

#+end_src
* 编程语言
** golang 语言
#+begin_src emacs-lisp
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(defun nox-go-install-save-hooks ()
  (add-hook 'before-save-hook #'nox-format t t))


;; go语言支持
(use-package go-mode
  :mode "\\.go\\'"
  :init
  (setq gofmt-command "goimports")
  :config
  ;; (add-hook 'go-mode-hook #'nox-go-install-save-hooks)
  ;; (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  
  ;; go 调试
  (require 'dap-go)
  (dap-go-setup)
  :hook ((go-mode . lsp))
  :bind
  (:map go-mode-map
   ("<f9>" . gofmt))
  )


;; ;; 禁用自动保存
;; (add-hook 'go-mode-hook 'auto-save-disable)

;; 使用gocode 提供代码类型显示(在minibuffer)
(use-package go-eldoc
  :ensure t
  :after go-mode
  :hook ((go-mode . go-eldoc-setup)))

;; ;; 使用guru 进行代码导航
;; (use-package go-guru
;;   :ensure t
;;   :hook (go-mode . go-guru-hl-identifier-mode))

;; ;; go代码调试
;; (use-package go-dlv
;;   :after go-mode
;;   :ensure t)

;; go 包测试
(use-package gotest
  :after go-mode
  :ensure t
  :bind (:map go-mode-map
		 ("C-c t f" . go-test-current-file)
		 ("C-c t t" . go-test-current-test)
		 ("C-c t p" . go-test-current-project)
		 ("C-c t b" . go-test-current-benchmark)
		 ("C-x x" . go-run))
  )
;; go 生成测试代码
(use-package go-gen-test
  :after go-mode
  :ensure t)

;; go lint
;; (use-package golint
;;   :after go-mode
;;   :ensure t)
(use-package flycheck-golangci-lint
  :ensure t
  :hook (go-mode . flycheck-golangci-lint-setup))

(when (display-graphic-p)
  (require 'dap-go)
  (dap-go-setup))

#+end_src
golang 工具
#+begin_quote
go install github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest
go install github.com/ramya-rao-a/go-outline@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest
go install github.com/josharian/impl@latest
go install github.com/haya14busa/goplay/cmd/goplay@latest
go install github.com/go-delve/delve/cmd/dlv@latest
go install honnef.co/go/tools/cmd/staticcheck@latest
go install golang.org/x/tools/gopls@latest
# go install github.com/go-delve/delve/cmd/dlv@2f13672765fe dlv-dap
#+end_quote
** lua 语言
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t
  :config
  ;; (setq lsp-clients-luarocks-bin-dir "/usr/local/bin/")
  ;; (setq lsp-clients-lua-lsp-server-install-dir "/usr/local/bin/lua-lsp")
  ;; (setq lsp-clients-lua-language-server-bin "~/.emacs.d/.cache/lsp/lua-language-server/bin/macOS/lua-language-server")
  ;; (setq lsp-lua-diagnostics-globals t)
  (setq lsp-lua-diagnostics-disable (vector "unused-local" "lowercase-global" "trailing-space" "empty-block"))
  (setq lsp-lua-diagnostics-globals (vector "global" "flags"))
  (setq lua-indent-level 4)
  (setq lua-indent-nested-block-content-align nil)
  (setq lua-indent-close-paren-align nil)
  ;; (setq lsp-lua-diagnostics-disable nil)
  :hook ((lua-mode . lsp))
  )

;; (message lsp-clients-lua-language-server-install-dir)
#+end_src
** c/c++
#+begin_src emacs-lisp
;; ;; ubuntu
;; (setq lsp-clangd-binary-path "/usr/bin/clangd-12")
;; (add-hook 'c-mode-hook 'lsp)
;; (add-hook 'c++-mode-hook 'lsp)
;; C/C++ Mode
(use-package cc-mode
  :ensure t
  :bind (:map c-mode-base-map
         ("C-c c" . compile))
  :hook
  (c-mode-common . (lambda () (c-set-style "stroustrup")))
  (c-mode . lsp)
  (c++-mode . lsp)
  :init (setq-default c-basic-offset 4)
  :config
  ;; ubuntu
  (if sys/linuxp 
	  (setq lsp-clangd-binary-path "/usr/bin/clangd-12"))
  (use-package modern-cpp-font-lock
	:ensure t
	:diminish
	:config
	(modern-c++-font-lock-global-mode t))
  )

#+end_src

* org mode
** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :config
  ;;(add-hook 'org-mode-hook #'org-bullets-mode)
  )
#+end_src
** org 基础配置
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package ox-gfm
  :ensure t)
(use-package htmlize
  :ensure t)
(use-package ob-http
  :ensure t)
(use-package ob-sql-mode
  :ensure t)

(use-package org
  :ensure nil
  :bind
  (:map global-map
   ("C-c a" . org-agenda)
   ("C-c b" . org-iswitchb)
   ("C-c c" . org-capture))
  (:map org-mode-map
   ("C-c l" . org-store-link)
   ("s-<return>" . org-table-copy-down))
  :config
  (if sys/win32p
	  (progn 
		(setq org-default-notes-file (expand-file-name "~/org/index.org"))
		(setq org-agenda-files '("~/org/work/" "~/org/knowledge/")))
	(setq org-default-notes-file (expand-file-name "d:/org/index.org"))
	(setq org-agenda-files '("d:/org/work/" "d:/org/knowledge/"))
	)
  :custom
  (org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-log-refile 'time)
  :hook ((org-mode . toggle-truncate-lines))
  :init
  ;; https://orgmode.org/worg/org-contrib/babel/languages.html
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
	 (shell . t)
	 (python . t)
	 (makefile . t)
	 (http . t)
	 (clojure . t)
	 (sql . t)
	 (awk . t)
	 (sed . t)
	 (emacs-lisp . t)))
  (setq org-src-tab-acts-natively t
		;; 代码区域禁用第一层缩进 https://emacs.stackexchange.com/a/18892/16450
		org-src-preserve-indentation t
		org-log-done 'time
		org-startup-folded "showall"
		org-startup-indented t
		org-image-actual-width nil
		org-export-with-sub-superscripts nil
		org-hide-emphasis-markers nil
		;; terminal emacs can't display those lovely images :-(
		org-startup-with-inline-images t
		org-confirm-babel-evaluate nil)
  ;; markdown export require emacs 25 https://stackoverflow.com/a/33033533/2163429
  (require 'ox-md nil t)
  (require 'org-tempo)
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.6 :bold t))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.4 :bold t))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.2 :bold t))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0 :bold t))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0 :bold t))))
   )
  ;; #+LaTeX_HEADER: \usepackage{CJK}
  ;; #+LaTeX_HEADER: \begin{CJK}{UTF8}{gbsn}
  (add-to-list 'org-latex-packages-alist '("" "CJKutf8" t))

  (advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)

  (setq org-publish-project-alist
		'(("org-notes"
		   :base-directory "~/study-note/"
		   :base-extension "org"
		   :publishing-directory "~/Documents/public_notes"
		   :recursive t
		   :publishing-function org-html-publish-to-html
		   :headline-levels 4             ; Just the default for this project.
		   :auto-preamble t)

		  ("org-static"
		   :base-directory "~/study-note/"
		   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
		   :publishing-directory "~/Documents/public_notes"
		   :recursive t
		   :publishing-function org-publish-attachment))))

;; org 基础配置
                                        ;(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
                                        ;(add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
;; (global-set-key "\C-cl" 'org-store-link)
;; (global-set-key "\C-ca" 'org-agenda)
;; (global-set-key "\C-cb" 'org-iswitchb)
;; (global-set-key "\C-cc" 'org-capture)
;; (setq org-default-notes-file "~/org/default.org")
;; ;; org agenda
;; (setq org-agenda-files '("~/org/" "~/org/work/" "~/org/knowledge/"))
;; (setq org-refile-use-outline-path 'file)
;; (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
;; (setq org-outline-path-complete-in-steps nil)
;; (setq org-refile-allow-creating-parent-nodes 'confirm)
;; ;; 设置org-todo 依赖
;; (setq org-enforce-todo-dependencies t)
;; ;; 使用org-depend
;; (require 'org-depend)
;; ;; 显示图片设置
;; (setq org-image-actual-width (/ (display-pixel-width) 3))
;; ;;
;; (org-display-inline-images)
#+end_src
#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/externs/org-protocol-capture-html")
;; (require 'org-protocol-capture-html)
#+end_src
** org 外部交互
#+begin_src emacs-lisp
;; org 协议. 和外部交互
(require 'org-protocol)
;; 启动服务器. 外部调用访问(浏览器等)
(require 'server)
(or (server-running-p)
    (server-start))
                                        ;(server-start)
#+end_src
** org web tool
#+begin_src emacs-lisp
;; brew install pandoc pandoc-citeproc librsvg python homebrew/cask/basictex
(use-package org-web-tools
  :ensure t)
;; 使用 org-web-tools-read-url-as-org 转换剪切板中的连接为org.并在新缓冲区中打开.
;; 使用 org-web-tools-convert-links-to-page-entries	将entry中的url转换为org.并添加到当前entry下面


;; 使用 org-board-archive 下载网站
(use-package org-board
  :ensure t)
;; 例子
;; ** TODO Linkers (20-part series)
;; :PROPERTIES:
;; :URL:          http://a3f.at/lists/linkers
;; :WGET_OPTIONS: --recursive -l 1 --span-hosts
;; :ID:       A339E336-5CD3-447D-A658-C9A7263BD32E
;; :ARCHIVED_AT: [[file:/Users/chenzhiyuan/org/knowledge/data/A3/39E336-5CD3-447D-A658-C9A7263BD32E/2020-11-23T13:57:47+0800/][2020-11-23T13:57:47+0800]]
;; :END:
#+end_src
** org-capture
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; emacs org capture config
;; '("t" "Task" entry (file+headline "" "Tasks") "* TODO %?\n  %u\n  %a")
;; 清空
;; 网上抓取的日志
;; (add-to-list 'org-capture-templates '("n" "Web site" entry
;;  (file "")
;;  "* %a :website:\n\n%U %?\n\n%:initial"))
;; 设置 org-capture
(setq org-capture-templates
	  '(
		;; 工作相关记录
		;; ("w" "工作相关") - 暂不分组
		("t" "工作任务" entry
		 (file+olp "~/org/work/work.org" "临时记录" "任务")
		 "*** TODO %^{标题} :task:\n %?\n%U\n")
		("b" "BUG记录" entry
		 (file+olp "~/org/work/work.org" "临时记录" "BUG")
		 "*** TODO %^{标题} :bug:\n %?\n%U\n")
		("r" "备忘信息" entry
		 (file+olp "~/org/work/work.org" "备忘录")
		 "** %^{标题}\n %?\n%U\n")
		("p" "账号密码" entry
		 (file+olp "~/org/work/note.org" "账号密码")
		 "** %^{标题}\n  %?\n%U\n")
		("d" "文档记录" entry
		 (file+olp "~/org/work/note.org" "文档")
		 "** %^{标题}\n %?\n")
		)
	  )
(setq org-todo-keywords
      '((sequence "TODO(t)" "DOING(i)" "HANGUP(h)" "|" "DONE(d)" "CANCEL(c)")
        (sequence "⚑(T)" "🏴(I)" "❓(H)" "|" "✔(D)" "✘(C)"))
      org-todo-keyword-faces '(("HANGUP" . warning)
                               ("❓" . warning))
      org-priority-faces '((?A . error)
                           (?B . warning)
                           (?C . success)))
#+end_src


** org-publis1h
** org 自动补全
#+begin_src emacs-lisp
(use-package ido-completing-read+
  :ensure t)
(defun @-insert-src-block (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive
   (let ((src-code-types
	      '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
			"calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
			"octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
			"haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
			"scheme" "sqlite" "html" "go")))
     (list (ido-completing-read+ "Source code type: " src-code-types))))
  (progn
    (newline-and-indent)
    (insert (format "\n#+begin_src %s\n" src-code-type))
    (newline-and-indent)
    (insert "#+end_src\n")
    (previous-line 2)
    (org-edit-src-code)))
#+end_src

** org-projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read))
  :config
  (progn
	(setq org-projectile-per-project-filepath
		  "~/org/ap.org")
	;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
	;;(push (org-projectile-project-todo-entry) org-capture-templates))
	:ensure t)
  )
;; (princ org-capture-templates)

#+end_src

* 自己写的插件
** 快速创建当日记录文件
#+begin_src emacs-lisp
(require 'fastwork)
(setq fastwork-file-title '(concat "#+startup: showall\n"
								   "#+title: " (format-time-string "%Y-%m-%d记录\n")
								   "* 工作记录\n* BUG分析\n"))
(if sys/win32p
	(setq fastwork-dir "d:/org/work/record/"))
#+end_src
